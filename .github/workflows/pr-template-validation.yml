name: PR Template Validation

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize

jobs:
  validate-pr-template:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read # Grant read permission to access the PR body

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use any Python 3 version

      - name: Validate PR Template Sections and Content
        id: validate_pr # Add an ID to this step to access its outputs
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          REQUIRED_SECTIONS=(
            "### Description"
            "### Problem"
            "### Root Cause"
            "### Solution"
          )

          # Pass PR_BODY and REQUIRED_SECTIONS to a Python script
          python -c "
import os
import re

pr_body = os.environ['PR_BODY']
required_sections = os.environ['REQUIRED_SECTIONS'].splitlines() # Split by newline to get individual sections

errors = []
found_sections = {}

# Normalize PR body: ensure consistent newlines and trim leading/trailing whitespace
pr_body = pr_body.replace('\r\n', '\n').strip() + '\n' # Add a newline at the end to catch content for the last section

# Create a regex pattern to find all headings and their content
# This pattern looks for a heading, then captures everything until the next heading or end of string
pattern = r'(###\s*(.*?))\n(.*?)(?=\n###\s*|\Z)'
matches = re.finditer(pattern, pr_body, re.DOTALL | re.IGNORECASE)

for match in matches:
    full_heading = match.group(1).strip() # e.g., '### Description'
    content = match.group(3).strip() # Content after the heading

    found_sections[full_heading] = content

# Check for missing headings and empty content
for section in required_sections:
    if section not in found_sections:
        errors.append(f'❌ Missing required section heading: \"{section}\"')
    else:
        content = found_sections[section]
        if not content: # Check if content is empty after stripping whitespace
            errors.append(f'❌ Section \"{section}\" is present but has no content.')
        else:
            print(f'✅ Section \"{section}\" found with content.')

if errors:
    for error in errors:
        print(f'::error::{error}')
    print('::error::PR template validation failed.')
    exit(1)
else:
    print('All required PR template sections are present and have content.')
"
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          REQUIRED_SECTIONS: |
            ### Description
            ### Problem
            ### Root Cause
            ### Solution
